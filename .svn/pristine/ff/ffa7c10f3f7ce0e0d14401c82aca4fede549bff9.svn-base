#include <Wt/Dbo/backend/Sqlite3.h>

#include "MainApp.h"
#include "UserAccount.h"
#include "Entry.h"

mainApp::mainApp(const Wt::WEnvironment& env) : Wt::WApplication(env) {
    auto sqlite3 = std::make_unique<Wt::Dbo::backend::Sqlite3>(WApplication::appRoot() + "coupon_web.db");
    sqlite3->setProperty("show-queries", "true");
    session.setConnection(std::move(sqlite3));

    session.mapClass<userAccount>("user_account");
    session.mapClass<Entry>("entry");

    dbo::Transaction transaction(session);
    try {
        session.createTables();
        log("info") << "Database created";
    } catch (...) {
        log("info") << "Using existing database";
    }

    transaction.commit();
    messageResourceBundle().use(appRoot() + "login");
    messageResourceBundle().use(appRoot() + "mainpage");

    //this->user_acc_ = this->user_acc_ = userAccount::login(session, "root");
    //this->main_ptr_ = this->root()->addWidget(std::make_unique<mainPage>(this->user_acc_ ));
    this->login_ptr_ = root()->addWidget(std::make_unique<loginPage>());
    this->login_ptr_->loggedIn().connect(this, &mainApp::logIn);
}

void mainApp::logIn(const Wt::WString& user) {
    this->root()->clear();
    this->user_acc_ = userAccount::login(session, user);
    this->main_ptr_ = this->root()->addWidget(std::make_unique<mainPage>(this->user_acc_ ));
    this->main_ptr_->menuMain();

    this->root()->addWidget(std::make_unique<Wt::WText>("<br></br>"));
    this->root()->addWidget(std::make_unique<Wt::WText>("REFRESH CTR = " + std::to_string( this->refresh_ctr)));

    this->main_ptr_->exitMain().connect(this, &mainApp::logOut);
    this->main_ptr_->menuMain().connect(this, &mainApp::menuMain);
    this->main_ptr_->menuOne().connect(this, &mainApp::menuOne);
    this->main_ptr_->menuTwo().connect(this, &mainApp::menuTwo);
    this->main_ptr_->menuThree().connect(this, &mainApp::menuThree);
}

void mainApp::logOut() {
    this->root()->clear();
    this->login_ptr_ = this->root()->addWidget(std::make_unique<loginPage>());
    this->login_ptr_->loggedIn().connect(this, &mainApp::logIn);
}

void mainApp::refresh(void) {
    this->refresh_ctr++;
    this->root()->removeWidget(this->main_ptr_);
    this->root()->refresh();
    this->logIn(this->user_acc_->name);
}

void mainApp::menuMain(void) {
    this->refresh();
    this->main_ptr_->setMainPageContent();
}

void mainApp::menuOne(void) {
    this->refresh();
    this->main_ptr_->setMenuOneContent();
}

void mainApp::menuTwo(void) {
    this->refresh();
    this->main_ptr_->setMenuTwoContent();
}

void mainApp::menuThree(void) {
    this->refresh();
    this->main_ptr_->setMenuThreeContent();
}
